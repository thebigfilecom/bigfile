{deps, [
	{b64fast, {git, "https://github.com/thebigfilecom/b64fast.git", {ref, "58f0502e49bf73b29d95c6d02460d1fb8d2a5273"}}},
	{jiffy, {git, "https://github.com/thebigfilecom/jiffy.git", {ref, "f25a120f02951b9fd618d1f8f6343fdb8dbe133f"}}},
	{gun, "1.3.3"},
	{cowboy, "2.10.0"},
	{prometheus, "4.11.0"},
	{prometheus_process_collector,
          {git, "https://github.com/thebigfilecom/prometheus_process_collector.git",
            {ref, "1362b608ffa4748cdf5dba92b85c981218fd4fa2"}}},
	{prometheus_cowboy, "0.1.8"},
	{rocksdb, {git, "https://github.com/thebigfilecom/erlang-rocksdb.git", {ref, "f580865c0bc18b0302a6190d7fa85e68ec0762e0"}}},
	{recon, {git, "https://github.com/ferd/recon.git", {tag, "2.5.6"}}}
]}.

{overrides,
	[{override, b64fast, [
		{plugins, [{pc, {git, "https://github.com/blt/port_compiler.git", {tag, "v1.12.0"}}}]},
		{artifacts, ["priv/b64fast.so"]},
		{provider_hooks, [
			{post, [
				{compile, {pc, compile}},
				{clean, {pc, clean}}
			]
		}]
	}]}
]}.

{relx, [
	{release, {bigfile, "2.9.4"}, [
		{bigfile, load},
		{recon, load},
		b64fast,
		jiffy,
		rocksdb,
		prometheus_process_collector
	]},

	{sys_config, "./config/sys.config"},
	{vm_args_src, "./config/vm.args.src"},

	% dynamically generated overlay variable, required for
	% extra variables during script generation.
	{overlay_vars, "_vars.config"},
	{overlay, [
		{template, "priv/templates/extended_bin", "bin/bigfile"},
		{template, "priv/templates/extended_bin", "{{output_dir}}/{{release_version}}/bin/bigfile"},
		{template, "priv/templates/vm_args", "{{output_dir}}/{{release_version}}/vm.args"},
		{copy, "bin/start", "bin/start"},
		{copy, "bin/stop", "bin/stop"},
		{copy, "bin/console", "bin/console"},
		{copy, "bin/create-wallet", "bin/create-wallet"},
		{copy, "bin/benchmark-2.9", "bin/benchmark-2.9"},
		{copy, "bin/benchmark-hash", "bin/benchmark-hash"},
		{copy, "bin/benchmark-packing", "bin/benchmark-packing"},
		{copy, "bin/benchmark-vdf", "bin/benchmark-vdf"},
		{copy, "bin/data-doctor", "bin/data-doctor"},
		{copy, "bin/logs", "bin/logs"},
		{copy, "bin/debug-logs", "bin/debug-logs"},
		{copy, "genesis_data/not_found.html", "genesis_data/not_found.html"},
		{copy, "genesis_data/hash_list_1_0", "genesis_data/hash_list_1_0"},
		{copy, "genesis_data/genesis_wallets.csv", "genesis_data/genesis_wallets.csv"},
		{copy, "genesis_data/genesis_txs/gCmvhZDHpVFKQ7spt8XHxe5FGtJSxcIHxcNpBFKt9NI.json", "genesis_data/genesis_txs/gCmvhZDHpVFKQ7spt8XHxe5FGtJSxcIHxcNpBFKt9NI.json"}
	]},

	{dev_mode, true},
	{include_erts, false},

	% {extended_start_script, true},
	{extended_start_script_hook, [
		{post_start, [
			wait_for_vm_start,
			{pid, "/tmp/bigfile.pid"},
			{wait_for_process, big_sup}
		]}
	]}
]}.

{pre_hooks, [
	% Build for randomx512 configuration
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "./build_randomx.sh 512 > /dev/null"},
	{"(darwin)", compile, "make randomx -C apps/bigfile/lib/RandomX/build512"},
	{"(linux)", compile, "make -C apps/bigfile/lib/RandomX/build512"},
	{"(freebsd|netbsd|openbsd)", compile, "gmake -C apps/bigfile/lib/RandomX/build512"},
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "bash -c \"cd apps/bigfile/lib/RandomX/build512 && mv librandomx.a librandomx512.a\""},
	% Build for randomx4096 configuration
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "./build_randomx.sh 4096 > /dev/null"},
	{"(darwin)", compile, "make randomx -C apps/bigfile/lib/RandomX/build4096"},
	{"(linux)", compile, "make -C apps/bigfile/lib/RandomX/build4096"},
	{"(freebsd|netbsd|openbsd)", compile, "gmake -C apps/bigfile/lib/RandomX/build4096"},
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "bash -c \"cd apps/bigfile/lib/RandomX/build4096 && mv librandomx.a librandomx4096.a\""},
	% Build for randomxsquared configuration
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "./build_randomx.sh squared > /dev/null"},
	{"(darwin)", compile, "make randomx -C apps/bigfile/lib/RandomX/buildsquared"},
	{"(linux)", compile, "make -C apps/bigfile/lib/RandomX/buildsquared"},
	{"(freebsd|netbsd|openbsd)", compile, "gmake -C apps/bigfile/lib/RandomX/buildsquared"},
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "bash -c \"cd apps/bigfile/lib/RandomX/buildsquared && mv librandomx.a librandomxsquared.a\""},
	% Build libsecp256k1
	{"(darwin|linux|freebsd|netbsd|openbsd)", compile, "./build_secp256k1.sh > /dev/null"},
	% Compile NIFs
	{"(linux)", compile, "env BIG=gcc-ar make all -C apps/bigfile/c_src"},
	{"(darwin)", compile, "make all -C apps/bigfile/c_src"},
	{"(freebsd|netbsd|openbsd)", compile, "gmake all -C apps/bigfile/c_src"}
]}.
{post_hooks, [
	% Clean randomx512
	{"(linux|darwin)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/build512 ]; then make -C apps/bigfile/lib/RandomX/build512 clean; fi\""},
	{"(freebsd|netbsd|openbsd)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/build512 ]; then gmake -C apps/bigfile/lib/RandomX/build512 clean; fi\""},
	% Clean randomx4096
	{"(linux|darwin)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/build4096 ]; then make -C apps/bigfile/lib/RandomX/build4096 clean; fi\""},
	{"(freebsd|netbsd|openbsd)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/build4096 ]; then gmake -C apps/bigfile/lib/RandomX/build4096 clean; fi\""},
	% Clean randomxsquared
	{"(linux|darwin)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/buildsquared ]; then make -C apps/bigfile/lib/RandomX/buildsquared clean; fi\""},
	{"(freebsd|netbsd|openbsd)", clean, "bash -c \"if [ -d apps/bigfile/lib/RandomX/buildsquared ]; then gmake -C apps/bigfile/lib/RandomX/buildsquared clean; fi\""},
	% Clean secp256k1
	{"(linux|darwin|freebsd|netbsd|openbsd)", clean, "bash -c \"if [ -d apps/bigfile/lib/secp256k1/build ]; then rm -rf apps/bigfile/lib/secp256k1/build; fi\""},
	% Clan NIFs
	{"(linux|darwin)", clean, "make -C apps/bigfile/c_src clean"},
	{"(freebsd|netbsd|openbsd)", clean, "gmake -C apps/bigfile/c_src clean"}
]}.

{erl_opts, [
	{i, "apps"}
]}.
{profiles, [
	{prod, [
		{relx, [
			{dev_mode, false},
			{include_erts, true}
		]}
	]},
	{test, [
		{deps, [{meck, "0.8.13"}]},
		{erl_opts, [
			{d, 'DEBUG', debug},
			{d, 'FORKS_RESET', true},
			{d, 'NETWORK_NAME', "bigfile.localtest"},
			{d, 'BIG_TEST', true},
			%% lower multiplier to allow single-block solutions in tests
			{d, 'POA1_DIFF_MULTIPLIER', 1},
			%% use sha256 instead of randomx to speed up tests
			{d, 'STUB_RANDOMX', true},
			{d, 'VDF_DIFFICULTY', 2},
			{d, 'INITIAL_VDF_DIFFICULTY', 2},
			{d, 'REPLICA_2_9_PACKING_DIFFICULTY', 2},
			{d, 'BLOCK_2_9_SYNCING', false}
		 ]},
		 {relx, [
			 {overlay, [{template, "priv/templates/extended_bin", "bin/bigfile"}]}
		 ]}
	]},
	{e2e, [
		{deps, [{meck, "0.8.13"}]},
		{erl_opts, [
			{src_dirs, ["src", "test", "e2e"]},
			{d, 'DEBUG', debug},
			{d, 'FORKS_RESET', true},
			{d, 'NETWORK_NAME', "bigfile.e2e"},
			{d, 'BIG_TEST', true},
			%% The partition upper bound only gets increased when the vdf session changes
			%% (i.e. every ?NONCE_LIMITER_RESET_FREQUENCY VDF steps), so  we need to set
			%% the reset frequency low enough that the VDF session can change during a
			%% single e2e test run.
			{d, 'NONCE_LIMITER_RESET_FREQUENCY', 10}
		]},
		{relx, [
			 {overlay, [{template, "priv/templates/extended_bin", "bin/bigfile"}]}
		 ]}
	]},
	{localnet, [
		{erl_opts, [
			%% FORKS_RESET tells localent to apply the current network consensus rules. You
			%% probably don't want to change this.
			{d, 'FORKS_RESET', true},

			%% All peers in your localnet must specify the same NETWORK_NAME, and all requests
			%% to nodes in your network must specify NETWORK_NAME in their X-Network header.
			%% If you clear this value, the mainnet will be assumed.
			{d, 'NETWORK_NAME', "bigfile.localnet"},

			%% When a request is received without specifing the X-Network header, this network
			%% name is assumed. Rather than change this, it's better to make sure your clients
			%% specify the X-Network name as this will avoid potential issues (e.g.
			%% accidentally transferring mainnet BIG tokens when you only intended to transfer
			%% localnet tokens). This variable is provided for situations where you can't
			%% control the client headers, need for them to be able to make requests to your
			%% localnet, and can manage the risk of an accidental mainnet request getting
			%% processed.
			%% {d, 'DEFAULT_NETWORK_NAME', "bigfile.localnet"},

			%% The block time that the network targets - difficulty adjusts up if the average
			%% block time is lower than TARGET_BLOCK_TIME seconds, and difficulty adjusts down
			%% if the average block time is higher than TARGET_BLOCK_TIME seconds. Leave
			%% undefined to use the default value of 120 seconds.
			%% {d, 'TARGET_BLOCK_TIME', 120},

			%% The protocol will adjust the difficulty every RETARGET_BLOCKS block by taking
			%% the average observed block time and adjusting network difficulty to move towards
			%% the TARGET_BLOCK_TIME.
			%% {d, 'RETARGET_BLOCKS', 10_000},

			%% Your mining address will be initialized with this amount of BIG when you
			%% launch your localnet.
			%%{d, 'LOCALNET_BALANCE', 200_000_000}
			export_all,
			no_inline
		]},
		{relx, [
			{release, {bigfile, "2.9.4"}, [
				{bigfile, load},
				{recon, load},
				b64fast,
				jiffy,
				rocksdb,
				prometheus_process_collector
			]},
			{dev_mode, false},
			{include_erts, true}
		]}
	]},
	{testnet, [
		{deps, [{meck, "0.8.13"}]},
		{erl_opts, [
			%% -------------------------------------------------------------------------------------
			%% Required configuration for testnet
			%% All values below must be set for the testnet to function properly
			%% -------------------------------------------------------------------------------------
			{d, 'TESTNET', true},
			{d, 'FORKS_RESET', true},
			{d, 'NETWORK_NAME', "bigfile.T.1"},
			{d, 'TEST_WALLET_ADDRESS', "gCmvhZDHpVFKQ7spt8XHxe5FGtJSxcIHxcNpBFKt9NI"},
			%%{d, 'TOP_UP_TEST_WALLET_BIG', 200000000},

			%% The following values all assume the testnet is restarted from height 1588329 using
			%% the flag:
			%% start_from_block 3lIjFuR6nMYwELWwQqZxYn_sj1tESmZgk6bVZewwxtr0X6a8mXG0JH7KAV_5AE2s

			%% TESTNET_FORK_HEIGHT should meet the following requirements:
			%% 1. Set to a difficulty retargeting height - i.e. a multiple of
			%%    ?RETARGET_BLOCKS (currently 10)
			%% 2. Set to 1 more than the testnet initialization height.
			%% 3. Set to the height of a block which has not yet been mined on the
			%%    testnet, or one which was already mined on the testnet (i.e. after the testnet
			%%    was forked from mainnet)
			%%
			%% For example, if the testnet was forked off mainnet at
			%% height 1265219 (either through the use of start_from_latest_state or
			%% start_from_block), then TESTNET_FORK_HEIGHT should be set to 1265220.
			{d, 'TESTNET_FORK_HEIGHT', 0},

			%% -------------------------------------------------------------------------------------
			%% Optional configuration for testnet
			%% Any values below here are not required and can be cleared/deleted as needed
			%% -------------------------------------------------------------------------------------
			{d, 'TESTNET_REWARD_HISTORY_BLOCKS', 120},
			{d, 'TESTNET_LEGACY_REWARD_HISTORY_BLOCKS', 40},
			{d, 'TESTNET_LOCKED_REWARDS_BLOCKS', 40},
			{d, 'TESTNET_TARGET_BLOCK_TIME', 120},
			{d, 'FORK_2_9_HEIGHT', 0}
		]},
		{relx, [
			{dev_mode, false},
			{include_erts, true},
			{overlay, [
				{copy, "scripts/testnet/benchmark", "bin/benchmark"}
			]}
		]}
	]}
]}.
